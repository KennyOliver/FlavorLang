{
  "name": "FlavorLang",
  "fileTypes": ["flv", "flavor", "flavorlang"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#keywords" },
    { "include": "#builtin-functions" },
    { "include": "#functions" },
    { "include": "#numbers" },
    { "include": "#operators" },
    { "include": "#variables" },
    { "include": "#ranges" },
    { "include": "#error-handling" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.flavorlang",
          "match": "#.*$"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.flavorlang",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.flavorlang",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.flavorlang",
          "match": "\\b(let|const|if|elif|else|for|in|while|create|burn|deliver|check|is|rescue|try|finish|break|continue)\\b"
        },
        {
          "name": "keyword.other.flavorlang",
          "match": "\\b(True|False|None)\\b"
        }
      ]
    },
    "builtin-functions": {
      "patterns": [
        {
          "name": "support.function.builtin.flavorlang",
          "match": "\\b(?:sample|serve|burn|random|floor|ceil|round|abs|get_time|taste_file|plate_file|garnish_file|length|sleep|cimport)\\b(?=\\()"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.create.flavorlang",
          "match": "\\bcreate\\b\\s+[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "entity.name.function.call.flavorlang",
          "match": "\\b(?!sample\\b|serve\\b|burn\\b|random\\b|floor\\b|ceil\\b|round\\b|abs\\b|get_time\\b|taste_file\\b|plate_file\\b|garnish_file\\b|length\\b|sleep\\b|cimport\\b)[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\()"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.flavorlang",
          "match": "\\b-?\\d+\\b"
        },
        {
          "name": "constant.numeric.float.flavorlang",
          "match": "\\b-?\\d+\\.\\d+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.flavorlang",
          "match": "==|!=|<=|>=|<|>|\\+|\\-|\\*\\*|\\/\\/|\\/|%|=|\\.\\.|\\.\\."
        },
        {
          "name": "punctuation.separator.range.flavorlang",
          "match": "\\.{2,3}"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.flavorlang",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "ranges": {
      "patterns": [
        {
          "name": "meta.range.flavorlang",
          "match": "\\b\\d+\\.\\.=?\\d+\\b"
        }
      ]
    },
    "error-handling": {
      "patterns": [
        {
          "name": "keyword.control.error-handling.flavorlang",
          "match": "\\b(burn|rescue|try|deliver)\\b"
        }
      ]
    }
  },
  "scopeName": "source.flavorlang"
}
