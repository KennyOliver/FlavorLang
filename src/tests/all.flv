# ==================================================
# 1
# ==================================================
serve("Hello world!");


# ==================================================
# 2
# ==================================================
const name = "Hello, " + "world!" + " :)";
const age = 25;

serve(name);
serve("Age:", age);


# Extra tests
const str_str = "X" + " Y";
serve(str_str);

const str_int = "X" + 1;
serve(str_int);

const int_str = 1 + "Y";
serve(int_str);

const int_int = 1 + 2;
serve(int_int);

const array1 = [1, 2, 3];
const array2 = [4, 5, 6];
const array_concatenation_result = array1 + array2;
serve(array_concatenation_result); # [1, 2, 3, 4, 5, 6]


# ==================================================
# 3
# ==================================================
const oven_temperature = 200;

if oven_temperature > 180 {
    serve("The oven is hot!");
} elif oven_temperature == 180 {
    serve("The oven is just right!");
} else {
    serve("The oven is too cold!");
}


# ==================================================
# 4
# ==================================================
for i in 1..5 {
    serve("Mixing... Step", i);
}

for j in 10..=1 by -3 {
    serve(j);
}


# ==================================================
# 5
# ==================================================
let flour_added = 0;

while flour_added < 3 {
    serve("Adding flour...");
    flour_added = flour_added + 1;
    serve("End of iteration");
}

serve("All flour has been added!");
serve("Flour added:", flour_added);


# ==================================================
# 6
# ==================================================
create bake_cake(temperature) {
    if temperature < 180 {
        serve("Temperature is too low to bake!");
        burn("Cake burned!"); # stops function execution immediately
	} else {
        serve("Baking cake at", temperature, "degrees!");
        deliver "Cake is ready!";
	}
}

const result = bake_cake(200);
serve(result);


# ==================================================
# 7
# ==================================================
try {
    serve("This will run!");
    burn("This recipe failed!");
    serve("This won't run!");
} rescue {
    serve("Caught an error: Recipe needs improvement.");
}

try {
    int("abc");
    serve("This won't run!");
} rescue {
    serve("(Expect a) Runtime error: Can't cast string `abc` to int.");
} finish {
    serve("This always executes!");
}


# ==================================================
# 8
# ==================================================
const dessert = "cake";

check dessert {
    is "cake":
        serve("Bake the cake!");
    is "pie":
    is "cookie":
        serve("Prepare the oven!");
        break;
    else:
        serve("Dessert not on the menu.");
}


# ==================================================
# 9
# ==================================================
serve("What's your favorite dessert?");
const favorite = sample();

serve("You chose:", favorite);

# ==================================================
# 10
# ==================================================

let stop_loop = False;
let count = 10;

serve("Preparing for launch!");

while stop_loop != True {
    serve(count);
    
    if count > 0 {
        count = count - 1;
    } else {
        stop_loop = True;
    }
}

serve("Blast off!");


# ==================================================
# 11
# ==================================================
const filepath = "./tests/output.txt";

plate_file(filepath, "Freshly baked cake ready to deliver!");
garnish_file(filepath, "\nDon't forget the toppings!");

const data = taste_file(filepath);
serve("File Contents:");
serve(data);


# ==================================================
# 12
# ==================================================
# const time = 20;

# serve("Before error.");

# if time > 15 {
#     burn("Too late!", "The food got burnt!");
# }

# serve("After error?");


# ==================================================
# 13
# ==================================================
const a = 1;
serve(a + a);
serve(string(a) + string(a));

const b = "True";
const c = "False";
serve(b == c);
serve(b != c);

for _ in 1..=2 {
    serve("Enter a number:");
    let user_input = int(sample());
    let positive = user_input >= 0;
    serve("Positive?", positive);
}

serve(float("+8"));
serve(int(True));
serve(float(True));
serve(int(False));
serve(float(False));


# ==================================================
# 14
# ==================================================
# Using `sample()` to get user input
serve("Enter your favorite number:");
const favorite2 = sample();
serve("Your favorite is:", favorite2);

# Using `random()` with different argument counts
const num1 = random();              # Generates between 0.0 and 1.0
const num2 = random(5.0);           # Generates between 0.0 and 5.0
const num3 = random(10.0, 20.0);    # Generates between 10.0 and 20.0
serve("Random numbers:", num1, num2, num3);

for i in 1..=10 {
    serve(i, "\t->", random());
}

# Using `burn()` to raise an error
# burn("This is a fatal error with code:", 1001);


# ==================================================
# 15
# ==================================================
create get_year_from_unix(timestamp) {
    let temp_timestamp = timestamp;
    let year = 1970;

    let is_leap = ((year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0)));
    let seconds_in_year = 365 * 24 * 60 * 60;
    if is_leap {
        seconds_in_year = 366 * 24 * 60 * 60;
    }

    while (temp_timestamp >= seconds_in_year) {
        temp_timestamp = temp_timestamp - seconds_in_year;
        year = year + 1;

        is_leap = ((year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0)));
        seconds_in_year = 365 * 24 * 60 * 60;
        if is_leap {
            seconds_in_year = 366 * 24 * 60 * 60;
        }
    }

    deliver year;
}

serve(get_year_from_unix(get_time()));


# ==================================================
# 16
# ==================================================
create check_even_odd(num) {
    deliver num % 2 == 0 ? "Even" : "Odd";
}

for _ in 1..=5 {
    serve("Enter a number:");
    let input = int(sample());
    serve(check_even_odd(input));
}


# ==================================================
# 17
# ==================================================
create times_2(x) {
    deliver x * 2;
}

create times_3(x) {
    deliver x * 3;
}

create test(num, func_a, func_b) {
    deliver func_b(func_a(func_b(num)));
}

let calc17_result = test(10, times_2, times_3); # 180
serve(calc17_result);


# ==================================================
# 18
# ==================================================
# Initialize test array
let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
serve("Initial array:", array);

# Element Access
serve("Accessing 6th element (index 5):", array[5]);

# Append
array[^+] = 11;
serve("Array after appending 11:", array);

# Prepend
array[+^] = 0;
serve("Array after prepending 0:", array);

# Remove Last Element
serve("Removing last element:", array[^-]);
serve("Array after removing last element:", array);

# Remove First Element
serve("Removing first element:", array[-^]);
serve("Array after removing first element:", array);

# Slicing
serve("Slice from index 0 to 5:", array[0:5]);
serve("Reversed array:", array[::-1]);
serve("Slice from index 3 to end:", array[3:]);
serve("Slice from start to index 8:", array[:8]);
serve("Slice from index 3 to 8, skipping every 2nd element:", array[3:8:2]);
serve("Slice from index 8 to 3, skipping every 2nd element (reverse):", array[8:3:-2]);
serve("Slice from index 3 to start (reversed):", array[3::-1]);
serve("Slice from end towards index 8 (exclusive, reversed):", array[:8:-1]);
serve("Slice entire array, skipping every 2nd element:", array[::2]);
serve("Reverse array, skipping every 3rd element:", array[::-3]);

# Test completed
serve("Array operation tests complete!");

# Initialize const (immutable) array
const const_array = [10, 20, 30, 40, 50];
serve("Initial const array:", const_array);

# Attempt mutation
try {
    const_array[^+] = 60; # Trying to append to const array
    serve("This should not be shown; const array was mutated!");
} rescue {
    serve("Caught error: Cannot mutate a const array.");
}

# Confirm immutability
serve("Const array remains unchanged:", const_array);

# Try to remove element
try {
    const_array[^-]; # Attempting to remove the last element
    serve("This should not be shown; const array was mutated!");
} rescue {
    serve("Caught error: Cannot mutate a const array.");
}

# Final confirmation
serve("Const array is still:", const_array);

# Test completed
serve("Immutable array tests complete!");


# ==================================================
# 19
# ==================================================

# Test for array length
let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
serve("Initial array:", array);
serve("Length of array:", length(array));

# Test compound slicing
serve("Original array:", array);
serve("Double slice (first 5, then reverse):", (array[0:5])[::-1]);
serve("Triple slice (first 5, skip every second, then reverse):", ((array[0:5])[::2])[::-1]);

# Test declaring and using 2D arrays
let array2D = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];
serve("2D array:", array2D);

# Access individual elements
serve("Element at (2, 2):", array2D[1][1]);
serve("Element at (3, 3):", array2D[2][2]);

# Modify elements in a 2D array
array2D[0][0] = 10;
serve("2D array after modifying (1, 1) to 10:", array2D);

# Test slicing on rows
serve("First row:", array2D[0]);
serve("Last row reversed:", array2D[2][::-1]);

# Test slicing on columns (manual transpose-like slicing)
let first_column = [array2D[0][0], array2D[1][0], array2D[2][0]];
serve("First column:", first_column);

let second_column_reversed = [array2D[2][1], array2D[1][1], array2D[0][1]];
serve("Second column reversed:", second_column_reversed);

# Test length of 2D array and its rows
serve("Number of rows:", length(array2D));
serve("Number of elements in first row:", length(array2D[0]));

# Immutable 2D arrays
const const_2D_array = [
    [10, 20, 30],
    [40, 50, 60],
    [70, 80, 90]
];
serve("Immutable 2D array:", const_2D_array);

# Attempt mutation on immutable 2D array
try {
    const_2D_array[0][0] = 100; # Trying to modify element
    serve("This should not be shown; const 2D array was mutated!");
} rescue {
    serve("Caught error: Cannot mutate a const 2D array.");
}


# ==================================================
# 20
# ==================================================

serve(length("hello"));

const a20 = [random(), random(), random()];
const b20 = [random, random, random];

serve(a20);

for i in 0..(length(b)) {
    serve(b20[i](1, 2));
}

create my_func(x, y, z) {
    deliver x * y * z;
}

const c20 = [my_func, my_func, my_func, my_func];

for i in 0..(length(c20)) {
    serve(c20[i](0.5, 3, i));
}


# ==================================================
# 21
# ==================================================

for i in 100..=1 by -5 {
    serve(i);
    sleep(i * 10);
}


# ==================================================
# 22
# ==================================================

const string_to_index = "Hello world!";
serve(string_to_index[3]);  # expect 'l'
serve(string_to_index[8:]);  # expect 'lrld!'
serve(string_to_index[2::2]);  # expect 'lowrd'
serve(string_to_index[::-1]);  # expect '!dlrow olleH'
